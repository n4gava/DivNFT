{"version":3,"sources":["Contexts/contracts.js","Components/WalletInfo/index.js","Components/Header/index.js","Components/Footer/index.js","Components/Layout/index.js","Pages/Home/index.js","Pages/Mint/index.js","Components/NFTArea/index.js","Pages/Sample/index.js","Pages/MyNFTs/index.js","App.js","index.js"],"names":["ContractsContext","createContext","divNFTContractAddress","ContractsProvider","props","useState","divNFTContract","setDivNFTContract","cUSDContract","setCUSDContract","contractKit","setContractKit","networkReady","setNetworkReady","address","setAddress","accountChanged","accounts","connectToCeloNetwork","useCallback","a","window","celo","store","addNotification","title","message","type","insert","container","dismiss","duration","onScreen","enable","on","web3","Web3","kit","newKitFromWeb3","eth","getAccounts","approve","price","methods","send","from","result","useEffect","Contract","DivNFTContractAbi","erc20Abi","Provider","value","ERC20_DECIMALS","children","WalletInfo","balance","setBalance","useContext","getTotalBalance","totalBalance","cUSD","shiftedBy","toFixed","getBalance","className","id","onClick","Header","activeclassname","to","Footer","href","Layout","role","Home","showErrorNotification","showSucceedMessage","nftData","tokenId","Mint","uri","setUri","setPrice","minting","setMinting","mintNFT","e","preventDefault","uint256Price","BigNumber","toString","mint","getTokenDataByUri","call","onSubmit","htmlFor","onChange","target","aria-describedby","placeholder","NFTArea","nft","isOwner","setIsOwner","configIsOpen","setConfigIsOpen","content","setContent","destinationUrl","setDestinationUrl","owner","toLowerCase","changeNFTContent","changeContentAndPriceByTokenId","getTokenDataByTokenId","newData","buyNft","buyNFT","navigateToDestinationUrl","open","focus","renderOwner","renderPrice","stopPropagation","renderConfigButton","renderBackButton","renderNftArea","style","cursor","src","alt","Sample","lastTokenId","setLastTokenId","nfts","setNfts","loading","setLoading","updateNft","newNfts","filter","n","sort","b","getNfts","i","token","push","getLastTokenId","map","index","MyNft","myNfts","setMyNfts","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1b98e92.chunk.js","sourcesContent":["import { createContext, useEffect, useState, useCallback } from \"react\"\r\nimport DivNFTContractAbi from \"../Contracts/DivNFT.abi.json\"\r\nimport erc20Abi from \"../Contracts/erc20.abi.json\"\r\nimport Web3 from \"web3\"\r\nimport { store } from \"react-notifications-component\"\r\nimport { newKitFromWeb3 } from \"@celo/contractkit\"\r\n\r\nconst ContractsContext = createContext()\r\nconst ERC20_DECIMALS = 18\r\nconst divNFTContractAddress = \"0xBa167453C63Fc2541A8509B3990e3CcBd6B7630D\"\r\nconst cUSDContractAddress = \"0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1\"\r\n\r\nconst showMissingExtensionNotification = () => {\r\n    store.addNotification({\r\n        title: \"Missing Celo wallet\",\r\n        message: \"Please install the Celo browser extension.\",\r\n        type: \"warning\",\r\n        insert: \"top\",\r\n        container: \"top-right\",\r\n        dismiss: {\r\n            duration: 4000,\r\n            onScreen: true,\r\n        },\r\n    })\r\n}\r\n\r\nconst ContractsProvider = (props) => {\r\n    const [divNFTContract, setDivNFTContract] = useState(null)\r\n    const [cUSDContract, setCUSDContract] = useState(null)\r\n    const [contractKit, setContractKit] = useState(null)\r\n    const [networkReady, setNetworkReady] = useState(false)\r\n    const [address, setAddress] = useState(false)\r\n\r\n    const accountChanged = (accounts) => {\r\n        setAddress(accounts[0])\r\n    }\r\n    const connectToCeloNetwork = useCallback(async () => {\r\n        if (!window.celo) {\r\n            showMissingExtensionNotification()\r\n            return\r\n        }\r\n        await window.celo.enable()\r\n        window.celo.on(\"accountsChanged\", accountChanged)\r\n\r\n        const web3 = new Web3(window.celo)\r\n        const kit = newKitFromWeb3(web3)\r\n\r\n        const accounts = await kit.web3.eth.getAccounts()\r\n        setAddress(accounts[0])\r\n        setContractKit(kit)\r\n    }, [])\r\n\r\n    const approve = useCallback(\r\n        async (price) => {\r\n            const result = await cUSDContract.methods\r\n                .approve(divNFTContractAddress, price)\r\n                .send({ from: address })\r\n            return result\r\n        },\r\n        [address, cUSDContract]\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (contractKit) {\r\n            const divNFTContract = new contractKit.web3.eth.Contract(\r\n                DivNFTContractAbi,\r\n                divNFTContractAddress\r\n            )\r\n            setDivNFTContract(divNFTContract)\r\n            const cUSDContract = new contractKit.web3.eth.Contract(erc20Abi, cUSDContractAddress)\r\n            setCUSDContract(cUSDContract)\r\n            setNetworkReady(true)\r\n        }\r\n    }, [contractKit])\r\n\r\n    useEffect(() => {\r\n        if (window.celo) connectToCeloNetwork()\r\n    }, [connectToCeloNetwork])\r\n\r\n    return (\r\n        <ContractsContext.Provider\r\n            value={{\r\n                address,\r\n                divNFTContract,\r\n                cUSDContract,\r\n                contractKit,\r\n                networkReady,\r\n                ERC20_DECIMALS,\r\n                connectToCeloNetwork,\r\n                approve\r\n            }}\r\n        >\r\n            {props.children}\r\n        </ContractsContext.Provider>\r\n    )\r\n}\r\n\r\nexport { ContractsContext as default, ContractsProvider }\r\n","import { useContext, useEffect, useState } from \"react\"\r\nimport ContractsContext from \"../../Contexts/contracts\"\r\n\r\nconst WalletInfo = () => {\r\n    const [balance, setBalance] = useState(0)\r\n    const { address, networkReady, connectToCeloNetwork, contractKit, ERC20_DECIMALS } = useContext(ContractsContext)\r\n\r\n    useEffect(() => {\r\n        const getBalance = async () => {\r\n            if (!networkReady) {\r\n                setBalance(0)\r\n                return\r\n            }\r\n\r\n            const totalBalance = await contractKit.getTotalBalance(address)\r\n            setBalance(totalBalance.cUSD.shiftedBy(-ERC20_DECIMALS).toFixed(2))\r\n        }\r\n\r\n        getBalance()\r\n    }, [networkReady, contractKit, ERC20_DECIMALS, address])\r\n\r\n    const renderConnectWallet = () => {\r\n        return (\r\n            <button className=\"border rounded-pill btn-secondary\" onClick={connectToCeloNetwork}>\r\n                Connect Wallet\r\n            </button>\r\n        )\r\n    }\r\n\r\n    const renderConnectNetworkBalance = () => {\r\n        return (\r\n            <button className=\"border rounded-pill btn-secondary\">\r\n                <span id=\"balance\">{balance} </span>\r\n                cUSD\r\n            </button>\r\n        )\r\n    }\r\n\r\n    return networkReady ? renderConnectNetworkBalance() : renderConnectWallet()\r\n}\r\n\r\nexport default WalletInfo\r\n","import { NavLink } from \"react-router-dom\"\r\nimport WalletInfo from \"../WalletInfo\"\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"masthead mb-3\">\r\n                <h3 className=\"masthead-brand\">Div NFT</h3>\r\n                <nav className=\"nav nav-masthead justify-content-center\">\r\n                    <NavLink className=\"nav-link\" activeclassname=\"active\" to=\"/\">\r\n                        Home\r\n                    </NavLink>\r\n                    <NavLink className=\"nav-link\" activeclassname=\"active\" to=\"/mint\">\r\n                        Mint NFT\r\n                    </NavLink>\r\n                    <NavLink className=\"nav-link\" activeclassname=\"active\" to=\"/sample\">\r\n                        Sample Page\r\n                    </NavLink>\r\n                    <NavLink className=\"nav-link\" activeclassname=\"active\" to=\"/mynft\">\r\n                        My Div NFTs\r\n                    </NavLink>\r\n                </nav>\r\n                <div className=\"wallet-masthead\">\r\n                    <WalletInfo />\r\n                </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","const Footer = () => {\r\n    return (\r\n        <footer className=\"mastfoot mt-3\">\r\n            <div className=\"inner\">\r\n                <p>\r\n                    Created by <a href=\"https://github.com/n4gava\">N4Gava</a> - <a href=\"https://github.com/n4gava/DivNFT\">Github</a>\r\n                </p>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import Header from \"../Header\"\r\nimport Footer from \"../Footer\"\r\n\r\nconst Layout = (props) => {\r\n    return (\r\n        <div className=\"app cover-container d-flex h-100 p-3 mx-auto flex-column\">\r\n            <Header />\r\n            <main role=\"main\" className=\"inner cover flex-grow-1\">\r\n                <div className=\"page inner cover d-flex flex-column flex-grow-1\">\r\n                    {props.children}\r\n                </div>\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n    return (\r\n        <>\r\n            <h1 className=\"cover-heading\">Create a NFT for your Website</h1>\r\n            <p className=\"lead\">Div NFT allows you to sell a part of your website.</p>\r\n            <p className=\"lead\">\r\n                <Link className=\"btn btn-lg btn-secondary\" to=\"/mint\">Mint my first Div NFT</Link>\r\n            </p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import { useState, useContext } from \"react\"\r\nimport \"./mint.css\"\r\nimport ContractsContext from \"../../Contexts/contracts\"\r\nimport { store } from \"react-notifications-component\"\r\nimport BigNumber from \"bignumber.js\"\r\n\r\nconst showErrorNotification = (message) => {\r\n    store.addNotification({\r\n        title: \"Failed to mint\",\r\n        message: message,\r\n        type: \"danger\",\r\n        insert: \"top\",\r\n        container: \"top-right\",\r\n        dismiss: {\r\n            duration: 4000,\r\n            onScreen: true,\r\n        },\r\n    })\r\n}\r\n\r\nconst showSucceedMessage = (nftData) => {\r\n    store.addNotification({\r\n        title: \"Success\",\r\n        message: `You minted NFT Token id ${nftData.tokenId}`,\r\n        type: \"success\",\r\n        insert: \"top\",\r\n        container: \"top-center\",\r\n        dismiss: {\r\n            duration: 10000,\r\n            onScreen: true,\r\n        },\r\n    })\r\n}\r\n\r\nconst Mint = () => {\r\n    const [uri, setUri] = useState(\"\")\r\n    const [price, setPrice] = useState(\"\")\r\n    const [minting, setMinting] = useState(false)\r\n    const { divNFTContract, address, ERC20_DECIMALS } = useContext(ContractsContext)\r\n\r\n    \r\n\r\n    const mintNFT = async (e) => {\r\n        e.preventDefault()\r\n        if (!uri) return showErrorNotification(\"Div identification should be informed\")\r\n\r\n        setMinting(true)\r\n        const uint256Price = price ? new BigNumber(price).shiftedBy(ERC20_DECIMALS).toString() : 0;\r\n        try {\r\n            await divNFTContract.methods.mint(uri, uint256Price).send({ from: address })\r\n            const nftData = await divNFTContract.methods.getTokenDataByUri(uri).call()\r\n            setMinting(false)\r\n            showSucceedMessage(nftData)\r\n        } catch (e) {\r\n            setMinting(false)\r\n            showErrorNotification(e.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"cover-heading\">Mint a NFT for your Website</h1>\r\n            <p className=\"lead\">Use div-nfs.js package to shows and sell it in your website</p>\r\n            <p className=\"lead\"></p>\r\n            <form className=\"mint-nft-form\" onSubmit={mintNFT}>\r\n                <div className=\"form-group text-start\">\r\n                    <label htmlFor=\"url\">Div identification</label>\r\n                    <input\r\n                        id=\"url\"\r\n                        onChange={(e) => setUri(e.target.value)}\r\n                        value={uri}\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        aria-describedby=\"url-help\"\r\n                        placeholder=\"my-web-page-div-unique-identification\"\r\n                    />\r\n                    <small id=\"url-help\" className=\"form-text text-muted\">\r\n                        Enter a unique identification for your div.\r\n                    </small>\r\n                </div>\r\n                <div className=\"form-group text-start\">\r\n                    <label htmlFor=\"div-id\">Price</label>\r\n                    <div className=\"input-group has-validation\">\r\n                        <span className=\"input-group-text\" id=\"inputGroupPrepend\">\r\n                            cUSD\r\n                        </span>\r\n                        <input\r\n                            id=\"div-id\"\r\n                            onChange={(e) => setPrice(e.target.value)}\r\n                            value={price}\r\n                            type=\"number\"\r\n                            className=\"form-control\"\r\n                            aria-describedby=\"div-id-help\"\r\n                            placeholder=\"0.00\"\r\n                        />\r\n                    </div>\r\n                    <small id=\"div-id-help\" className=\"form-text text-muted\">\r\n                        Enter the NFT price. 0 for not for sale.\r\n                    </small>\r\n                </div>\r\n                <p className=\"lead\"></p>\r\n                <p className=\"lead\">\r\n                    {minting ? (\r\n                        <span className=\"btn btn-lg btn-secondary\">Minting</span>\r\n                    ) : (\r\n                        <button className=\"btn btn-lg btn-secondary\">Mint NFT</button>\r\n                    )}\r\n                </p>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Mint\r\n","import { useContext, useEffect, useState, useCallback } from \"react\"\r\nimport ContractsContext from \"../../Contexts/contracts\"\r\nimport \"./nft-area.css\"\r\nimport BigNumber from \"bignumber.js\"\r\nimport { store } from \"react-notifications-component\"\r\n\r\nconst showErrorNotification = (message) => {\r\n    store.addNotification({\r\n        title: \"Failed to mint\",\r\n        message: message,\r\n        type: \"danger\",\r\n        insert: \"top\",\r\n        container: \"top-right\",\r\n        dismiss: {\r\n            duration: 4000,\r\n            onScreen: true,\r\n        },\r\n    })\r\n}\r\n\r\nconst showSucceedMessage = (message) => {\r\n    store.addNotification({\r\n        title: \"Success\",\r\n        message: message,\r\n        type: \"success\",\r\n        insert: \"top\",\r\n        container: \"top-center\",\r\n        dismiss: {\r\n            duration: 10000,\r\n            onScreen: true,\r\n        },\r\n    })\r\n}\r\n\r\nconst emptyImage =\r\n    \"https://www.generationsforpeace.org/wp-content/uploads/2018/03/empty-300x240.jpg\"\r\n\r\nconst NFTArea = ({ nft, onChange }) => {\r\n    const { ERC20_DECIMALS, networkReady, address, divNFTContract, approve } =\r\n        useContext(ContractsContext)\r\n    const [isOwner, setIsOwner] = useState(false)\r\n    const [configIsOpen, setConfigIsOpen] = useState(false)\r\n    const [content, setContent] = useState(nft.content)\r\n    const [destinationUrl, setDestinationUrl] = useState(nft.destinationUrl)\r\n    const [price, setPrice] = useState(new BigNumber(nft.price).shiftedBy(-ERC20_DECIMALS).toFixed(2))\r\n\r\n    useEffect(() => {\r\n        if (!nft.owner || !address) return false\r\n        setIsOwner(nft.owner.toLowerCase() === address.toLowerCase())\r\n    }, [address, nft.owner])\r\n\r\n    const changeNFTContent = useCallback(\r\n        async (e) => {\r\n            e.preventDefault()\r\n            const uint256Price = price ? new BigNumber(price).shiftedBy(ERC20_DECIMALS).toString() : 0;\r\n            try {\r\n                await divNFTContract.methods\r\n                    .changeContentAndPriceByTokenId(nft.tokenId, uint256Price, content, destinationUrl)\r\n                    .send({ from: address })\r\n\r\n                const newData = await divNFTContract.methods\r\n                    .getTokenDataByTokenId(nft.tokenId)\r\n                    .call()\r\n                onChange(newData)\r\n                setConfigIsOpen(false)\r\n            } catch (e) {\r\n                showErrorNotification(e.message)\r\n            }\r\n        },\r\n        [content, destinationUrl, address, price, divNFTContract, onChange, nft.tokenId, ERC20_DECIMALS]\r\n    )\r\n\r\n    const buyNft = useCallback(async () => {\r\n        if (isOwner) return false\r\n        try {\r\n            await approve(nft.price)\r\n            await divNFTContract.methods.buyNFT(nft.tokenId).send({ from: address })\r\n\r\n            const newData = await divNFTContract.methods.getTokenDataByTokenId(nft.tokenId).call()\r\n            onChange(newData)\r\n            showSucceedMessage(\"NFT bought successfully\")\r\n        } catch (e) {\r\n            showErrorNotification(e.message)\r\n        }\r\n    }, [isOwner, nft.tokenId, nft.price, approve, address, divNFTContract, onChange])\r\n\r\n    const navigateToDestinationUrl = useCallback(() => {\r\n        if (nft.destinationUrl) window.open(nft.destinationUrl).focus()\r\n    }, [nft.destinationUrl])\r\n\r\n    const renderOwner = useCallback(() => {\r\n        return isOwner ? (\r\n            <span className=\"border rounded-pill p-1 me-1 bg-primary border-primary\">Owner</span>\r\n        ) : null\r\n    }, [isOwner])\r\n\r\n    const renderPrice = useCallback(() => {\r\n        const price =\r\n            nft.price > 0 ? new BigNumber(nft.price).shiftedBy(-ERC20_DECIMALS).toFixed(2) : 0\r\n\r\n        if (!price || price === 0)\r\n            return (\r\n                <span\r\n                    className=\"border rounded-pill p-1 bg-danger border-danger\"\r\n                    onClick={(e) => {\r\n                        e.stopPropagation()\r\n                    }}\r\n                >\r\n                    Not for sale\r\n                </span>\r\n            )\r\n\r\n        return (\r\n            <span\r\n                className=\"btn-label border rounded-pill p-1 bg-success border-success\"\r\n                onClick={(e) => {\r\n                    e.stopPropagation()\r\n                    buyNft()\r\n                }}\r\n            >\r\n                cUSD {price}\r\n            </span>\r\n        )\r\n    }, [nft.price, ERC20_DECIMALS, buyNft])\r\n\r\n    const renderConfigButton = useCallback(() => {\r\n        if (!isOwner) return\r\n        return (\r\n            <i\r\n                className=\"btn-label bi bi-gear-fill fs-6\"\r\n                onClick={(e) => {\r\n                    e.stopPropagation()\r\n                    setConfigIsOpen(true)\r\n                }}\r\n            ></i>\r\n        )\r\n    }, [isOwner])\r\n\r\n    const renderBackButton = useCallback(() => {\r\n        return (\r\n            <i\r\n                className=\"btn-label bi bi-backspace-fill fs-6\"\r\n                onClick={() => {\r\n                    setConfigIsOpen(false)\r\n                }}\r\n            ></i>\r\n        )\r\n    }, [])\r\n\r\n    const renderNftArea = useCallback(() => {\r\n        const style = nft.destinationUrl ? { cursor: \"pointer\" } : {}\r\n        return (\r\n            <div\r\n                className=\"nft-area-body d-flex flex-column m-1\"\r\n                style={style}\r\n                onClick={navigateToDestinationUrl}\r\n            >\r\n                <div className=\"d-inline-flex p-1 flex-grow-1\">\r\n                    <div className=\"flex-grow-1 text-start\">\r\n                        {renderOwner()}\r\n                        {renderPrice()}\r\n                    </div>\r\n                    {renderConfigButton()}\r\n                </div>\r\n                <div className=\"d-inline-flex p-1\">\r\n                    <div className=\"flex-grow-1 text-start fs-6\">NFT: {nft.tokenId}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }, [nft, renderConfigButton, renderOwner, renderPrice, navigateToDestinationUrl])\r\n\r\n    const renderNftSettings = () => {\r\n        return (\r\n            <div className=\"nft-area-body d-flex flex-column m-1\">\r\n                <div className=\"d-inline-flex p-1 flex-grow-1\">\r\n                    <div className=\"flex-grow-1 text-end\">{renderBackButton()}</div>\r\n                </div>\r\n                <form className=\"nft-area-form\" onSubmit={changeNFTContent}>\r\n                    <div className=\"form-group text-start mb-1\">\r\n                        <div className=\"input-group\">\r\n                            <span className=\"input-group-text p-0 ps-1 pe-1\">Image</span>\r\n                            <input\r\n                                onChange={(e) => setContent(e.target.value)}\r\n                                value={content}\r\n                                type=\"text\"\r\n                                className=\"form-control form-control-sm p-0\"\r\n                                placeholder=\"https://www.mypage.com/image.png\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group text-start mb-1\">\r\n                        <div className=\"input-group\">\r\n                            <span className=\"input-group-text p-0 ps-1 pe-1\">Href</span>\r\n                            <input\r\n                                onChange={(e) => setDestinationUrl(e.target.value)}\r\n                                value={destinationUrl}\r\n                                type=\"text\"\r\n                                className=\"form-control form-control-sm p-0\"\r\n                                placeholder=\"https://www.mypage.com/\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group text-start mb-1\">\r\n                        <div className=\"input-group\">\r\n                            <span className=\"input-group-text p-0 ps-1 pe-1\">cUSD</span>\r\n                            <input\r\n                                onChange={(e) => setPrice(e.target.value)}\r\n                                value={price}\r\n                                type=\"text\"\r\n                                className=\"form-control form-control-sm p-0\"\r\n                                placeholder=\"0.00\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <p className=\"lead\">\r\n                        <button className=\"btn btn-sm btn-secondary\">Update</button>\r\n                    </p>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!networkReady) return\r\n    return (\r\n        <div className=\"card nft-area\">\r\n            <img className=\"nft-img\" src={nft.content || emptyImage} alt={nft.tokenId} />\r\n            {configIsOpen ? renderNftSettings() : renderNftArea()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NFTArea\r\n","import { useContext, useEffect, useState } from \"react\"\r\nimport ContractsContext from \"../../Contexts/contracts\"\r\nimport \"./sample.css\"\r\nimport NFTArea from \"../../Components/NFTArea\"\r\n\r\nconst Sample = () => {\r\n    const { divNFTContract } = useContext(ContractsContext)\r\n    const [lastTokenId, setLastTokenId] = useState(0)\r\n    const [nfts, setNfts] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const updateNft = (nft) => {\r\n        const newNfts = nfts.filter(n => n.tokenId !== nft.tokenId)\r\n        setNfts([...newNfts, nft].sort((a, b) => a.tokenId - b.tokenId))\r\n    }\r\n\r\n    useEffect(() => {\r\n        const getNfts = async () => {\r\n            setLoading(true)\r\n            const nfts = []\r\n            for (let i = 1; i <= lastTokenId; i++) {\r\n                const token = await divNFTContract.methods.getTokenDataByTokenId(i).call()\r\n                if (token.tokenId > 0) nfts.push(token)\r\n            }\r\n            setNfts(nfts)\r\n            setLoading(false)\r\n        }\r\n        if (divNFTContract) getNfts()\r\n    }, [lastTokenId, divNFTContract])\r\n\r\n    useEffect(() => {\r\n        const getLastTokenId = async () => {\r\n            setLoading(true)\r\n            const lastTokenId = await divNFTContract.methods.getLastTokenId().call()\r\n            setLastTokenId(lastTokenId)\r\n            setLoading(false)\r\n        }\r\n        if (divNFTContract) getLastTokenId()\r\n    }, [divNFTContract])\r\n\r\n    return (\r\n        <div className=\"d-flex-column\">\r\n            <h1 className=\"cover-heading\">Minted NFTs</h1>\r\n            {loading && <p className=\"lead\">Loading...</p>}\r\n            <div className=\"nfts-container d-flex flex-row flex-wrap flex-grow-1\">\r\n                {nfts.map((nft, index) => {\r\n                    return (\r\n                        <div key={index} className=\"col-md-6 col-lg-4 col-12 p-2\">\r\n                            <NFTArea nft={nft} onChange={updateNft} />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sample\r\n","import { useContext, useEffect, useState } from \"react\"\r\nimport ContractsContext from \"../../Contexts/contracts\"\r\nimport \"./sample.css\"\r\nimport NFTArea from \"../../Components/NFTArea\"\r\n\r\nconst MyNft = () => {\r\n    const { divNFTContract, address } = useContext(ContractsContext)\r\n    const [lastTokenId, setLastTokenId] = useState(0)\r\n    const [myNfts, setMyNfts] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const updateNft = (nft) => {\r\n        const newNfts = myNfts.filter((n) => n.tokenId !== nft.tokenId)\r\n        setMyNfts([...newNfts, nft].sort((a, b) => a.tokenId - b.tokenId))\r\n    }\r\n\r\n    useEffect(() => {\r\n        const getNfts = async () => {\r\n            setLoading(true)\r\n            let nfts = []\r\n            for (let i = 1; i <= lastTokenId; i++) {\r\n                const token = await divNFTContract.methods.getTokenDataByTokenId(i).call()\r\n                if (token.tokenId > 0) nfts.push(token)\r\n            }\r\n            nfts = nfts.filter((nft) => nft.owner === address)\r\n            setMyNfts(nfts)\r\n            setLoading(false)\r\n        }\r\n        if (divNFTContract) getNfts()\r\n    }, [lastTokenId, divNFTContract, address])\r\n\r\n    useEffect(() => {\r\n        const getLastTokenId = async () => {\r\n            setLoading(true)\r\n            const lastTokenId = await divNFTContract.methods.getLastTokenId().call()\r\n            setLastTokenId(lastTokenId)\r\n            setLoading(false)\r\n        }\r\n        if (divNFTContract) getLastTokenId()\r\n    }, [divNFTContract])\r\n\r\n    return (\r\n        <div className=\"d-flex-column\">\r\n            <h1 className=\"cover-heading\">Minted NFTs</h1>\r\n            {loading && <p className=\"lead\">Loading...</p>}\r\n            <div className=\"nfts-container d-flex flex-row flex-wrap flex-grow-1\">\r\n                {myNfts.map((nft, index) => {\r\n                    return (\r\n                        <div key={index} className=\"col-md-6 col-lg-4 col-12 p-2\">\r\n                            <NFTArea nft={nft} onChange={updateNft} />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyNft\r\n","import Layout from \"./Components/Layout\"\r\nimport Home from \"./Pages/Home\"\r\nimport Mint from \"./Pages/Mint\"\r\nimport Sample from \"./Pages/Sample\"\r\nimport MyNft from \"./Pages/MyNFTs\"\r\nimport { Routes, Route } from \"react-router-dom\"\r\nimport ReactNotification from \"react-notifications-component\"\r\nimport { ContractsProvider } from \"./Contexts/contracts\"\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <ContractsProvider>\r\n            <ReactNotification />\r\n            <Layout>\r\n                <Routes>\r\n                    <Route path=\"/mint\" element={<Mint />} />\r\n                    <Route path=\"/sample\" element={<Sample />} />\r\n                    <Route path=\"/mynft\" element={<MyNft />} />\r\n                    <Route path=\"*\" element={<Home />} />\r\n                </Routes>\r\n            </Layout>\r\n        </ContractsProvider>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { HashRouter } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\"\nimport 'react-notifications-component/dist/theme.css'\nimport 'bootstrap-icons/font/bootstrap-icons.css';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}